<html>
<head>
<META HTTP-EQUIV="Content-type" CONTENT="text/html; charset=US-ASCII">
<META HTTP-EQUIV="Expires" CONTENT="Tue, 09 Aug 2050 22:16:01 GMT">
<title>
CSimpleSocket - C++ cross platform socket library
</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="foo.css" rel="stylesheet" type="text/css">
<LINK REV="made" href="mailto:mark@carrierlabs.com">
<META NAME="keywords" CONTENT="Sockets, TCP, UDP, Berkley Sockets, C++ socket library, carrierlabs, Mark Carrier">
<META NAME="description" CONTENT="C++ cross platform Berkley Socket class for build TCP and UDP sockets.">
<META NAME="author" CONTENT="Mark Carrier">
<META NAME="ROBOTS" CONTENT="ALL">
<!-- Metadata generated by http://vancouver-webpages.com/META/mk-metas.html -->
</head>

<body bgcolor="#ffffff"> 
<table width="100%">
  <tr>
    <td width="40%" align="left" valign="center">
      <a href="http://sockets.carrierlabs.com">
      CSocket project page
      </a>
    </td>
    <td>
    </td>
    <td width="40%" align="right" valign="center">
      <a href="http://sockets.carrierlabs.com">CSocket home page</a>
    </td>
  </tr>
</table>

<hr>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li class="current"><a href="classes.html"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.html"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Data&nbsp;Fields</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>CActiveSocket Class Reference</h1><!-- doxytag: class="CActiveSocket" --><!-- doxytag: inherits="CSimpleSocket" -->Provides a platform independent class to create an active socket.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="ActiveSocket_8h-source.html">ActiveSocket.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for CActiveSocket:</div>
<div class="dynsection">
<p><center><img src="classCActiveSocket__inherit__graph.png" border="0" usemap="#CActiveSocket__inherit__map" alt="Inheritance graph"></center>
<map name="CActiveSocket__inherit__map">
<area shape="rect" href="classCSimpleSocket.html" title="Provides a platform independent class to for socket development." alt="" coords="7,9,130,33"></map>
<center><font size="2">[<a href="graph_legend.html">legend</a>]</font></center></div>
<div class="dynheader">
Collaboration diagram for CActiveSocket:</div>
<div class="dynsection">
<p><center><img src="classCActiveSocket__coll__graph.png" border="0" usemap="#CActiveSocket__coll__map" alt="Collaboration graph"></center>
<map name="CActiveSocket__coll__map">
<area shape="rect" href="classCSimpleSocket.html" title="Provides a platform independent class to for socket development." alt="" coords="5,96,117,122"><area shape="rect" href="classCStatTimer.html" title="Class to abstract socket communications in a cross platform manner." alt="" coords="19,5,104,32"></map>
<center><font size="2">[<a href="graph_legend.html">legend</a>]</font></center></div>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#8c3d488772a77dae06eb1f8c205abfe9">CShutdownMode</a> { <a class="el" href="classCSimpleSocket.html#8c3d488772a77dae06eb1f8c205abfe9b81d5ed6d12b7df5e02dc2f330178e92">Receives</a> =  SHUT_RD, 
<a class="el" href="classCSimpleSocket.html#8c3d488772a77dae06eb1f8c205abfe9ffd0e4f89e450c1fd70cab51c6d9a6a5">Sends</a> =  SHUT_WR, 
<a class="el" href="classCSimpleSocket.html#8c3d488772a77dae06eb1f8c205abfe99d154e2ae30c6cbb2816970efbf5ba72">Both</a> =  SHUT_RDWR
 }</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines the three possible states for shuting down a socket.  <a href="classCSimpleSocket.html#8c3d488772a77dae06eb1f8c205abfe9">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2">CSocketError</a> { <br>
&nbsp;&nbsp;<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2e5d5690735ccc66ac14c5a8d97b2bc5e">SocketError</a> =  -1, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2609757248ddc01223638d0d570663fdc">SocketSuccess</a> =  0, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2f3661212e0a4cfdbba069411073e7825">SocketInvalidSocket</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c269563bb0688b2842763610ebcb5b4bcc">SocketInvalidAddress</a>, 
<br>
&nbsp;&nbsp;<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2a345665a8515a76268fdf197315a11cb">SocketInvalidPort</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2bfad1d52d09f2f83ed3d293f50159890">SocketConnectionRefused</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2a06e310fa94a602a98ec55ac60a30c10">SocketTimedout</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2c25321894edd9598a3d0da957735034e">SocketEwouldblock</a>, 
<br>
&nbsp;&nbsp;<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2c5f18669d134f4e1311a3fdbdb8b62d5">SocketNotconnected</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c23e206da915d21bf228080b75bd9c432a">SocketEinprogress</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2d99d75ff0289ce2007c2c666a5fc4443">SocketInterrupted</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c226b6eb3b2bd5317f9f368a9aa7ee575f">SocketConnectionAborted</a>, 
<br>
&nbsp;&nbsp;<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c271b3f4c36e859028efdb9dd2c499e888">SocketProtocolError</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2a53f9f8377865e14f2fd71e0e0eaad1e">SocketFirewallError</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2af5706d5d13e75b40c6416aff3808b05">SocketInvalidSocketBuffer</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2681c9229105669d6ae10db4bc85239fa">SocketConnectionReset</a>, 
<br>
&nbsp;&nbsp;<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c219d35f605c32425a83a9b2dd1eceecb0">SocketAddressInUse</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2b72f46da1ea6717213ee5225a3705972">SocketInvalidPointer</a>, 
<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2dd12e080a975d1ed0adaf1d100af2881">SocketEunknown</a>
<br>
 }</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines all error codes handled by the <a class="el" href="classCSimpleSocket.html" title="Provides a platform independent class to for socket development.">CSimpleSocket</a> class.  <a href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7">CSocketType</a> { <br>
&nbsp;&nbsp;<a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7c78d713774ded338100949e4dc3c068b">SocketTypeInvalid</a>, 
<a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c71a9ca75d50fff6c18c7b553ad4d47aed">SocketTypeTcp</a>, 
<a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c741e2e238da60bd587514f61a0e206833">SocketTypeUdp</a>, 
<a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7c8798a075ccdbc71432dab69d5cb18d2">SocketTypeTcp6</a>, 
<br>
&nbsp;&nbsp;<a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c75de88cb6cdc948463d820026f109fc9b">SocketTypeUdp6</a>, 
<a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7e54766512ec6e78fff79c3a7c38c1748">SocketTypeRaw</a>
<br>
 }</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines the socket types defined by <a class="el" href="classCSimpleSocket.html" title="Provides a platform independent class to for socket development.">CSimpleSocket</a> class.  <a href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCActiveSocket.html#cb68181c7fd2c61e3afb467de5b657d4">CActiveSocket</a> (<a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7">CSocketType</a> type=SocketTypeTcp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#fbb30cef80ae0faec59403184cab3bb1">Close</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Close socket.  <a href="#fbb30cef80ae0faec59403184cab3bb1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#d0e9ba20a79d885263a37d302d965384">GetBytesReceived</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the number of bytes received on the last call to CSocket::Receive().  <a href="#d0e9ba20a79d885263a37d302d965384"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#f6f86224b09aee5f173fd262311cf58f">GetBytesSent</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the number of bytes sent on the last call to CSocket::Send().  <a href="#f6f86224b09aee5f173fd262311cf58f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint8 *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#dc8051f7aeab62873e815f60e2c2b24e">GetClientAddr</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns clients Internet host address as a string in standard numbers-and-dots notation.  <a href="#dc8051f7aeab62873e815f60e2c2b24e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#75d9dabe06cfb1cbbcd7970f65fe81d9">GetClientPort</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the port number on which the client is connected.  <a href="#75d9dabe06cfb1cbbcd7970f65fe81d9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#98bbcbb4d926df41d48cdc9263895412">GetConnectTimeoutSec</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the timeout value that specifies the maximum number of seconds a call to CSimpleSocket::Open waits until it completes.  <a href="#98bbcbb4d926df41d48cdc9263895412"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#f1896d43112b855a2c405b324398c624">GetConnectTimeoutUSec</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the timeout value that specifies the maximum number of microseconds a call to CSimpleSocket::Open waits until it completes.  <a href="#f1896d43112b855a2c405b324398c624"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint8 *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#706d748dcef01b3f68d6927e4fe4eb20">GetData</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a pointer to internal receive buffer.  <a href="#706d748dcef01b3f68d6927e4fe4eb20"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#718b7685ae987a38577e5b4dc297a252">GetMulticast</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return true if socket is multicast or false is socket is unicast.  <a href="#718b7685ae987a38577e5b4dc297a252"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#ab0cf7934f60a1ae39af1559b0d3cab7">GetReceiveTimeoutSec</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the timeout value that specifies the maximum number of seconds a a call to <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a> waits until it completes.  <a href="#ab0cf7934f60a1ae39af1559b0d3cab7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#13d441ea66aaf5e16e22d70a785e4510">GetReceiveTimeoutUSec</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the timeout value that specifies the maximum number of microseconds a call to <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a> waits until it completes.  <a href="#13d441ea66aaf5e16e22d70a785e4510"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#0a65ca475c26968d536109cedb95f8a1">GetReceiveWindowSize</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the TCP receive buffer window size for the current socket object.  <a href="#0a65ca475c26968d536109cedb95f8a1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#eeffa14508f2eb24e2b7ce006b11c468">GetSendTimeoutSec</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the timeout value that specifies the maximum number of seconds a a call to <a class="el" href="classCSimpleSocket.html#cfd665d8d563b9d805c97a8ec9b66906" title="Attempts to send a block of data on an established connection.">CSimpleSocket::Send</a> waits until it completes.  <a href="#eeffa14508f2eb24e2b7ce006b11c468"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#06e9a88a898e4acb1e9533a20b14527f">GetSendTimeoutUSec</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the timeout value that specifies the maximum number of microseconds a call to <a class="el" href="classCSimpleSocket.html#cfd665d8d563b9d805c97a8ec9b66906" title="Attempts to send a block of data on an established connection.">CSimpleSocket::Send</a> waits until it completes.  <a href="#06e9a88a898e4acb1e9533a20b14527f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#b5ecb5d4b5af6d9d83f5aeba7b4dc5a1">GetSendWindowSize</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the TCP send buffer window size for the current socket object.  <a href="#b5ecb5d4b5af6d9d83f5aeba7b4dc5a1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint8 *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#523ac14d9c481058084eb25f8a2ee147">GetServerAddr</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns server Internet host address as a string in standard numbers-and-dots notation.  <a href="#523ac14d9c481058084eb25f8a2ee147"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#bfe30b93b5b70e9c03f89be8e7fcd528">GetServerPort</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the port number on which the server is connected.  <a href="#bfe30b93b5b70e9c03f89be8e7fcd528"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">SOCKET&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#21b802b377cea0f8388e154b1f7395c3">GetSocketDescriptor</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return socket descriptor.  <a href="#21b802b377cea0f8388e154b1f7395c3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#27419d5433086428196f2d1616bc053a">GetSocketDscp</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return Differentiated Services Code Point (DSCP) value currently set on the socket object.  <a href="#27419d5433086428196f2d1616bc053a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2">CSocketError</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#30d668bd610f47790106875aa7ac092b">GetSocketError</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the last error that occured for the instace of the <a class="el" href="classCSimpleSocket.html" title="Provides a platform independent class to for socket development.">CSimpleSocket</a> instance.  <a href="#30d668bd610f47790106875aa7ac092b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7">CSocketType</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#8b071012c1a0a2545bf9f2de6ab33b2f">GetSocketType</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return socket descriptor.  <a href="#8b071012c1a0a2545bf9f2de6ab33b2f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#08e3fc3ef4b8e083cf9a44bbc4fa85bf">GetTotalTimeMs</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the total time the of the last operation in milliseconds.  <a href="#08e3fc3ef4b8e083cf9a44bbc4fa85bf"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#3be3760f491b311feffae79868840f0e">GetTotalTimeUsec</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the total time the of the last operation in microseconds.  <a href="#3be3760f491b311feffae79868840f0e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#e50622a90672c5c697f2ec7a3a7eec06">Initialize</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initialize instance of CSocket.  <a href="#e50622a90672c5c697f2ec7a3a7eec06"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#b8eeaaf4aa2c27836d9e7e9029b76c17">IsNonblocking</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns blocking/non-blocking state of socket.  <a href="#b8eeaaf4aa2c27836d9e7e9029b76c17"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#66611a29e3ad37b0f4913cf378ccd14a">IsSocketValid</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Does the current instance of the socket object contain a valid socket descriptor.  <a href="#66611a29e3ad37b0f4913cf378ccd14a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCActiveSocket.html#5701a40f547abb0f71b7c94e998c0008">Open</a> (const uint8 *pAddr, int16 nPort)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Established a connection to the address specified by pAddr.  <a href="#5701a40f547abb0f71b7c94e998c0008"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76">Receive</a> (int32 nMaxBytes=1)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Attempts to receive a block of data on an established connection.  <a href="#973c8856b081fa4d784d5a9751549b76"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#1ffd254061206680384dc9cda52306fd">Select</a> (int32 nTimeoutSec, int32 nTimeoutUSec)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Examine the socket descriptor sets currently owned by the instance of the socket class (the readfds, writefds, and errorfds parameters) to see whether some of their descriptors are ready for reading, are ready for writing, or have an exceptional condition pending, respectively.  <a href="#1ffd254061206680384dc9cda52306fd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#089767d4181d190f3a040860c9788bb2">Select</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Examine the socket descriptor sets currently owned by the instance of the socket class (the readfds, writefds, and errorfds parameters) to see whether some of their descriptors are ready for reading, are ready for writing, or have an exceptional condition pending, respectively.  <a href="#089767d4181d190f3a040860c9788bb2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#8f2bbf005680a3f8ac6611107112db8f">Send</a> (const struct iovec *sendVector, int32 nNumItems)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Attempts to send at most nNumItem blocks described by sendVector to the socket descriptor associated with the socket object.  <a href="#8f2bbf005680a3f8ac6611107112db8f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#cfd665d8d563b9d805c97a8ec9b66906">Send</a> (const uint8 *pBuf, size_t bytesToSend)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Attempts to send a block of data on an established connection.  <a href="#cfd665d8d563b9d805c97a8ec9b66906"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#169550aeedaea4a764a16ac46d3c5186">SendFile</a> (int32 nOutFd, int32 nInFd, off_t *pOffset, int32 nCount)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copies data between one file descriptor and another.  <a href="#169550aeedaea4a764a16ac46d3c5186"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#51c89ece94e5c0cd58f246307de8a440">SetBlocking</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the socket to blocking.  <a href="#51c89ece94e5c0cd58f246307de8a440"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#fc1e28155821d07eb06a07e9ec9af1c4">SetConnectTimeout</a> (int32 nConnectTimeoutSec, int32 nConnectTimeoutUsec=0)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the timeout value that specifies the maximum amount of time a call to <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a> waits until it completes.  <a href="#fc1e28155821d07eb06a07e9ec9af1c4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#282cf019219627c87dfcf65c5ff52266">SetMulticast</a> (bool bEnable, uint8 multicastTTL=1)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable/disable multicast for a socket.  <a href="#282cf019219627c87dfcf65c5ff52266"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#17b8048b915d6429415d2014f7b3329d">SetNonblocking</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the socket as non-blocking.  <a href="#17b8048b915d6429415d2014f7b3329d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#e502d30b8df84caf6e260b82a686d10a">SetOptionLinger</a> (bool bEnable, uint16 nTime)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Controls the actions taken when <a class="el" href="classCSimpleSocket.html#fbb30cef80ae0faec59403184cab3bb1" title="Close socket.">CSimpleSocket::Close</a> is executed on a socket object that has unsent data.  <a href="#e502d30b8df84caf6e260b82a686d10a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#70dc7bedc18197071bf6e1f5f38f606b">SetOptionReuseAddr</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tells the kernel that even if this port is busy (in the TIME_WAIT state), go ahead and reuse it anyway.  <a href="#70dc7bedc18197071bf6e1f5f38f606b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#9809dfe236d876c9caa22e955721d863">SetReceiveTimeout</a> (int32 nRecvTimeoutSec, int32 nRecvTimeoutUsec=0)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the timeout value that specifies the maximum amount of time a call to <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a> waits until it completes.  <a href="#9809dfe236d876c9caa22e955721d863"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#047528b17ae445ae84d8288a316a16a9">SetReceiveWindowSize</a> (uint16 nWindowSize)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the TCP receive buffer window size for the current socket object.  <a href="#047528b17ae445ae84d8288a316a16a9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#258e807fea2f9f25aff4b636cf8f8387">SetSendTimeout</a> (int32 nSendTimeoutSec, int32 nSendTimeoutUsec=0)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the timeout value that specifies the maximum amount of time a call to <a class="el" href="classCSimpleSocket.html#cfd665d8d563b9d805c97a8ec9b66906" title="Attempts to send a block of data on an established connection.">CSimpleSocket::Send</a> waits until it completes.  <a href="#258e807fea2f9f25aff4b636cf8f8387"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#166c7f92820582af3e5071c14da3430a">SetSendWindowSize</a> (uint16 nWindowSize)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the TCP send buffer window size for the current socket object.  <a href="#166c7f92820582af3e5071c14da3430a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#8c373c3f300e588ea048773cb1457447">SetSocketDscp</a> (int nDscp)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Differentiated Services Code Point (DSCP) for socket object.  <a href="#8c373c3f300e588ea048773cb1457447"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#5b7672c71bc8d8431d36974b946103d7">Shutdown</a> (<a class="el" href="classCSimpleSocket.html#8c3d488772a77dae06eb1f8c205abfe9">CShutdownMode</a> nShutdown)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Shutdown shut down socket send and receive operations CShutdownMode::Receives - Disables further receive operations.  <a href="#5b7672c71bc8d8431d36974b946103d7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#80785e9658ecd6e118e9876bb222b074">TranslateSocketError</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Provides a standard error code for cross platform development by mapping the operating system error to an error defined by the CSocket class.  <a href="#80785e9658ecd6e118e9876bb222b074"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCActiveSocket.html#529128a5c846a00d3ecbda384a6e90d5">~CActiveSocket</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#2c53d886b10b5a1ac884c0b12408efdf">SetSocketError</a> (<a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2">CSimpleSocket::CSocketError</a> error)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set internal socket error to that specified error.  <a href="#2c53d886b10b5a1ac884c0b12408efdf"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#c3791a65b2ac38e9147178778f14213d">SetSocketHandle</a> (SOCKET socket)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set object socket handle to that specified as parameter.  <a href="#c3791a65b2ac38e9147178778f14213d"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#0fa46b098f507235ab93300d9cede03b">m_bIsBlocking</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">socket flags  <a href="#0fa46b098f507235ab93300d9cede03b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#2d8ff68b695387829b943db91114e2ed">m_bIsMulticast</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">is socket blocking  <a href="#2d8ff68b695387829b943db91114e2ed"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">fd_set&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#09720c2fe0c1f845b2b8ada42aa57cca">m_errorFds</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">read file descriptor set  <a href="#09720c2fe0c1f845b2b8ada42aa57cca"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#922adeaa565bf48b70c94cd1062cf966">m_nBufferSize</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">internal send/receive buffer  <a href="#922adeaa565bf48b70c94cd1062cf966"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#5eab8f504965f986debf1fabe16f9c02">m_nBytesReceived</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">socket type - UDP, TCP or RAW  <a href="#5eab8f504965f986debf1fabe16f9c02"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#961f1d48a92aca4758ff3d9edabae3be">m_nBytesSent</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">number of bytes received  <a href="#961f1d48a92aca4758ff3d9edabae3be"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#bb4748d3b25cf5591a8f0c1108f59c0b">m_nFlags</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">number of bytes sent  <a href="#bb4748d3b25cf5591a8f0c1108f59c0b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#5ff3c7572a658d0cedc180ccffb74580">m_nSocketDomain</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">size of internal send/receive buffer  <a href="#5ff3c7572a658d0cedc180ccffb74580"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7">CSocketType</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#aa237251e64e0a5018eb773901fa8000">m_nSocketType</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">socket type PF_INET, PF_INET6  <a href="#aa237251e64e0a5018eb773901fa8000"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">uint8 *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#4f17317b9f61a1a0d0b849fb5089333b">m_pBuffer</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">number of last error  <a href="#4f17317b9f61a1a0d0b849fb5089333b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">fd_set&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#c1a4125a37090b19b1b9604de1cf84a9">m_readFds</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">write file descriptor set  <a href="#c1a4125a37090b19b1b9604de1cf84a9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">SOCKET&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#8d17e468e981ec84f6eba64c82e32ec1">m_socket</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2">CSocketError</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#4c6904a3857098c5b1261d2183292951">m_socketErrno</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">socket handle  <a href="#4c6904a3857098c5b1261d2183292951"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct sockaddr_in&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#90df0422c5ebfa4bc9d1499265b717f6">m_stClientSockaddr</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">server address  <a href="#90df0422c5ebfa4bc9d1499265b717f6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct timeval&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#a7c7a1be0b72beac2c9ddac8354d60d3">m_stConnectTimeout</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">is the UDP socket multicast;  <a href="#a7c7a1be0b72beac2c9ddac8354d60d3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct linger&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#2f47c6ad98e583fa74fab014bfc9a6ac">m_stLinger</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">multicast group to bind to  <a href="#2f47c6ad98e583fa74fab014bfc9a6ac"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct sockaddr_in&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#00d93aa0620e16737f9b7889c910d0df">m_stMulticastGroup</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">client address  <a href="#00d93aa0620e16737f9b7889c910d0df"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct timeval&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#f36c0eb9621fdf0587c5702c0f06b814">m_stRecvTimeout</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">connection timeout  <a href="#f36c0eb9621fdf0587c5702c0f06b814"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct timeval&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#1074180f257ee695aeaeeb16127efde2">m_stSendTimeout</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">receive timeout  <a href="#1074180f257ee695aeaeeb16127efde2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct sockaddr_in&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#4c8501230c0005df31597b50abd330cf">m_stServerSockaddr</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">send timeout  <a href="#4c8501230c0005df31597b50abd330cf"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classCStatTimer.html">CStatTimer</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#79d0091533c01bd883f89d976cf851e6">m_timer</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">linger flag  <a href="#79d0091533c01bd883f89d976cf851e6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">fd_set&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCSimpleSocket.html#802754bb89c6a6e3ef2d11e5146b8de9">m_writeFds</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">internal statistics.  <a href="#802754bb89c6a6e3ef2d11e5146b8de9"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Friends</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCActiveSocket.html#6c2e5c8c659b9d474e2e0187c72c7e54">CPassiveSocket</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Provides a platform independent class to create an active socket. 
<p>
An active socket is used to create a socket which connects to a server. This type of object would be used when an application needs to send/receive data from a server. <hr><h2>Member Enumeration Documentation</h2>
<a class="anchor" name="8c3d488772a77dae06eb1f8c205abfe9"></a><!-- doxytag: member="CActiveSocket::CShutdownMode" ref="8c3d488772a77dae06eb1f8c205abfe9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classCSimpleSocket.html#8c3d488772a77dae06eb1f8c205abfe9">CSimpleSocket::CShutdownMode</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Defines the three possible states for shuting down a socket. 
<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="8c3d488772a77dae06eb1f8c205abfe9b81d5ed6d12b7df5e02dc2f330178e92"></a><!-- doxytag: member="Receives" ref="8c3d488772a77dae06eb1f8c205abfe9b81d5ed6d12b7df5e02dc2f330178e92" args="" -->Receives</em>&nbsp;</td><td>
Shutdown passive socket. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="8c3d488772a77dae06eb1f8c205abfe9ffd0e4f89e450c1fd70cab51c6d9a6a5"></a><!-- doxytag: member="Sends" ref="8c3d488772a77dae06eb1f8c205abfe9ffd0e4f89e450c1fd70cab51c6d9a6a5" args="" -->Sends</em>&nbsp;</td><td>
Shutdown active socket. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="8c3d488772a77dae06eb1f8c205abfe99d154e2ae30c6cbb2816970efbf5ba72"></a><!-- doxytag: member="Both" ref="8c3d488772a77dae06eb1f8c205abfe99d154e2ae30c6cbb2816970efbf5ba72" args="" -->Both</em>&nbsp;</td><td>
Shutdown both active and passive sockets. </td></tr>
</table>
</dl>

</div>
</div><p>
<a class="anchor" name="a82189211bafab77cbea1d52dd3790c2"></a><!-- doxytag: member="CActiveSocket::CSocketError" ref="a82189211bafab77cbea1d52dd3790c2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2">CSimpleSocket::CSocketError</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Defines all error codes handled by the <a class="el" href="classCSimpleSocket.html" title="Provides a platform independent class to for socket development.">CSimpleSocket</a> class. 
<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2e5d5690735ccc66ac14c5a8d97b2bc5e"></a><!-- doxytag: member="SocketError" ref="a82189211bafab77cbea1d52dd3790c2e5d5690735ccc66ac14c5a8d97b2bc5e" args="" -->SocketError</em>&nbsp;</td><td>
Generic socket error translates to error below. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2609757248ddc01223638d0d570663fdc"></a><!-- doxytag: member="SocketSuccess" ref="a82189211bafab77cbea1d52dd3790c2609757248ddc01223638d0d570663fdc" args="" -->SocketSuccess</em>&nbsp;</td><td>
No socket error. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2f3661212e0a4cfdbba069411073e7825"></a><!-- doxytag: member="SocketInvalidSocket" ref="a82189211bafab77cbea1d52dd3790c2f3661212e0a4cfdbba069411073e7825" args="" -->SocketInvalidSocket</em>&nbsp;</td><td>
Invalid socket handle. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c269563bb0688b2842763610ebcb5b4bcc"></a><!-- doxytag: member="SocketInvalidAddress" ref="a82189211bafab77cbea1d52dd3790c269563bb0688b2842763610ebcb5b4bcc" args="" -->SocketInvalidAddress</em>&nbsp;</td><td>
Invalid destination address specified. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2a345665a8515a76268fdf197315a11cb"></a><!-- doxytag: member="SocketInvalidPort" ref="a82189211bafab77cbea1d52dd3790c2a345665a8515a76268fdf197315a11cb" args="" -->SocketInvalidPort</em>&nbsp;</td><td>
Invalid destination port specified. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2bfad1d52d09f2f83ed3d293f50159890"></a><!-- doxytag: member="SocketConnectionRefused" ref="a82189211bafab77cbea1d52dd3790c2bfad1d52d09f2f83ed3d293f50159890" args="" -->SocketConnectionRefused</em>&nbsp;</td><td>
No server is listening at remote address. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2a06e310fa94a602a98ec55ac60a30c10"></a><!-- doxytag: member="SocketTimedout" ref="a82189211bafab77cbea1d52dd3790c2a06e310fa94a602a98ec55ac60a30c10" args="" -->SocketTimedout</em>&nbsp;</td><td>
Timed out while attempting operation. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2c25321894edd9598a3d0da957735034e"></a><!-- doxytag: member="SocketEwouldblock" ref="a82189211bafab77cbea1d52dd3790c2c25321894edd9598a3d0da957735034e" args="" -->SocketEwouldblock</em>&nbsp;</td><td>
Operation would block if socket were blocking. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2c5f18669d134f4e1311a3fdbdb8b62d5"></a><!-- doxytag: member="SocketNotconnected" ref="a82189211bafab77cbea1d52dd3790c2c5f18669d134f4e1311a3fdbdb8b62d5" args="" -->SocketNotconnected</em>&nbsp;</td><td>
Currently not connected. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c23e206da915d21bf228080b75bd9c432a"></a><!-- doxytag: member="SocketEinprogress" ref="a82189211bafab77cbea1d52dd3790c23e206da915d21bf228080b75bd9c432a" args="" -->SocketEinprogress</em>&nbsp;</td><td>
Socket is non-blocking and the connection cannot be completed immediately. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2d99d75ff0289ce2007c2c666a5fc4443"></a><!-- doxytag: member="SocketInterrupted" ref="a82189211bafab77cbea1d52dd3790c2d99d75ff0289ce2007c2c666a5fc4443" args="" -->SocketInterrupted</em>&nbsp;</td><td>
Call was interrupted by a signal that was caught before a valid connection arrived. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c226b6eb3b2bd5317f9f368a9aa7ee575f"></a><!-- doxytag: member="SocketConnectionAborted" ref="a82189211bafab77cbea1d52dd3790c226b6eb3b2bd5317f9f368a9aa7ee575f" args="" -->SocketConnectionAborted</em>&nbsp;</td><td>
The connection has been aborted. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c271b3f4c36e859028efdb9dd2c499e888"></a><!-- doxytag: member="SocketProtocolError" ref="a82189211bafab77cbea1d52dd3790c271b3f4c36e859028efdb9dd2c499e888" args="" -->SocketProtocolError</em>&nbsp;</td><td>
Invalid protocol for operation. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2a53f9f8377865e14f2fd71e0e0eaad1e"></a><!-- doxytag: member="SocketFirewallError" ref="a82189211bafab77cbea1d52dd3790c2a53f9f8377865e14f2fd71e0e0eaad1e" args="" -->SocketFirewallError</em>&nbsp;</td><td>
Firewall rules forbid connection. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2af5706d5d13e75b40c6416aff3808b05"></a><!-- doxytag: member="SocketInvalidSocketBuffer" ref="a82189211bafab77cbea1d52dd3790c2af5706d5d13e75b40c6416aff3808b05" args="" -->SocketInvalidSocketBuffer</em>&nbsp;</td><td>
The receive buffer point outside the process's address space. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2681c9229105669d6ae10db4bc85239fa"></a><!-- doxytag: member="SocketConnectionReset" ref="a82189211bafab77cbea1d52dd3790c2681c9229105669d6ae10db4bc85239fa" args="" -->SocketConnectionReset</em>&nbsp;</td><td>
Connection was forcibly closed by the remote host. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c219d35f605c32425a83a9b2dd1eceecb0"></a><!-- doxytag: member="SocketAddressInUse" ref="a82189211bafab77cbea1d52dd3790c219d35f605c32425a83a9b2dd1eceecb0" args="" -->SocketAddressInUse</em>&nbsp;</td><td>
Address already in use. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2b72f46da1ea6717213ee5225a3705972"></a><!-- doxytag: member="SocketInvalidPointer" ref="a82189211bafab77cbea1d52dd3790c2b72f46da1ea6717213ee5225a3705972" args="" -->SocketInvalidPointer</em>&nbsp;</td><td>
Pointer type supplied as argument is invalid. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="a82189211bafab77cbea1d52dd3790c2dd12e080a975d1ed0adaf1d100af2881"></a><!-- doxytag: member="SocketEunknown" ref="a82189211bafab77cbea1d52dd3790c2dd12e080a975d1ed0adaf1d100af2881" args="" -->SocketEunknown</em>&nbsp;</td><td>
Unknown error please report to <a href="mailto:mark@carrierlabs.com">mark@carrierlabs.com</a>. </td></tr>
</table>
</dl>

</div>
</div><p>
<a class="anchor" name="6d077b2f4ec0449bf7a0761635a034c7"></a><!-- doxytag: member="CActiveSocket::CSocketType" ref="6d077b2f4ec0449bf7a0761635a034c7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7">CSimpleSocket::CSocketType</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Defines the socket types defined by <a class="el" href="classCSimpleSocket.html" title="Provides a platform independent class to for socket development.">CSimpleSocket</a> class. 
<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="6d077b2f4ec0449bf7a0761635a034c7c78d713774ded338100949e4dc3c068b"></a><!-- doxytag: member="SocketTypeInvalid" ref="6d077b2f4ec0449bf7a0761635a034c7c78d713774ded338100949e4dc3c068b" args="" -->SocketTypeInvalid</em>&nbsp;</td><td>
Invalid socket type. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="6d077b2f4ec0449bf7a0761635a034c71a9ca75d50fff6c18c7b553ad4d47aed"></a><!-- doxytag: member="SocketTypeTcp" ref="6d077b2f4ec0449bf7a0761635a034c71a9ca75d50fff6c18c7b553ad4d47aed" args="" -->SocketTypeTcp</em>&nbsp;</td><td>
Defines socket as TCP socket. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="6d077b2f4ec0449bf7a0761635a034c741e2e238da60bd587514f61a0e206833"></a><!-- doxytag: member="SocketTypeUdp" ref="6d077b2f4ec0449bf7a0761635a034c741e2e238da60bd587514f61a0e206833" args="" -->SocketTypeUdp</em>&nbsp;</td><td>
Defines socket as UDP socket. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="6d077b2f4ec0449bf7a0761635a034c7c8798a075ccdbc71432dab69d5cb18d2"></a><!-- doxytag: member="SocketTypeTcp6" ref="6d077b2f4ec0449bf7a0761635a034c7c8798a075ccdbc71432dab69d5cb18d2" args="" -->SocketTypeTcp6</em>&nbsp;</td><td>
Defines socket as IPv6 TCP socket. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="6d077b2f4ec0449bf7a0761635a034c75de88cb6cdc948463d820026f109fc9b"></a><!-- doxytag: member="SocketTypeUdp6" ref="6d077b2f4ec0449bf7a0761635a034c75de88cb6cdc948463d820026f109fc9b" args="" -->SocketTypeUdp6</em>&nbsp;</td><td>
Defines socket as IPv6 UDP socket. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="6d077b2f4ec0449bf7a0761635a034c7e54766512ec6e78fff79c3a7c38c1748"></a><!-- doxytag: member="SocketTypeRaw" ref="6d077b2f4ec0449bf7a0761635a034c7e54766512ec6e78fff79c3a7c38c1748" args="" -->SocketTypeRaw</em>&nbsp;</td><td>
Provides raw network protocol access. </td></tr>
</table>
</dl>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="cb68181c7fd2c61e3afb467de5b657d4"></a><!-- doxytag: member="CActiveSocket::CActiveSocket" ref="cb68181c7fd2c61e3afb467de5b657d4" args="(CSocketType type=SocketTypeTcp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">CActiveSocket::CActiveSocket           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7">CSocketType</a>&nbsp;</td>
          <td class="paramname"> <em>type</em> = <code>SocketTypeTcp</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="529128a5c846a00d3ecbda384a6e90d5"></a><!-- doxytag: member="CActiveSocket::~CActiveSocket" ref="529128a5c846a00d3ecbda384a6e90d5" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual CActiveSocket::~CActiveSocket           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="fbb30cef80ae0faec59403184cab3bb1"></a><!-- doxytag: member="CActiveSocket::Close" ref="fbb30cef80ae0faec59403184cab3bb1" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::Close           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Close socket. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if successfully closed otherwise returns false. </dd></dl>

</div>
</div><p>
<a class="anchor" name="d0e9ba20a79d885263a37d302d965384"></a><!-- doxytag: member="CActiveSocket::GetBytesReceived" ref="d0e9ba20a79d885263a37d302d965384" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::GetBytesReceived           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the number of bytes received on the last call to CSocket::Receive(). 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>number of bytes received. </dd></dl>

</div>
</div><p>
<a class="anchor" name="f6f86224b09aee5f173fd262311cf58f"></a><!-- doxytag: member="CActiveSocket::GetBytesSent" ref="f6f86224b09aee5f173fd262311cf58f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::GetBytesSent           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the number of bytes sent on the last call to CSocket::Send(). 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>number of bytes sent. </dd></dl>

</div>
</div><p>
<a class="anchor" name="dc8051f7aeab62873e815f60e2c2b24e"></a><!-- doxytag: member="CActiveSocket::GetClientAddr" ref="dc8051f7aeab62873e815f60e2c2b24e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8* CSimpleSocket::GetClientAddr           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns clients Internet host address as a string in standard numbers-and-dots notation. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>NULL if invalid </dd></dl>

</div>
</div><p>
<a class="anchor" name="75d9dabe06cfb1cbbcd7970f65fe81d9"></a><!-- doxytag: member="CActiveSocket::GetClientPort" ref="75d9dabe06cfb1cbbcd7970f65fe81d9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int16 CSimpleSocket::GetClientPort           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the port number on which the client is connected. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>client port number. </dd></dl>

</div>
</div><p>
<a class="anchor" name="98bbcbb4d926df41d48cdc9263895412"></a><!-- doxytag: member="CActiveSocket::GetConnectTimeoutSec" ref="98bbcbb4d926df41d48cdc9263895412" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::GetConnectTimeoutSec           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the timeout value that specifies the maximum number of seconds a call to CSimpleSocket::Open waits until it completes. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the length of time in seconds </dd></dl>

</div>
</div><p>
<a class="anchor" name="f1896d43112b855a2c405b324398c624"></a><!-- doxytag: member="CActiveSocket::GetConnectTimeoutUSec" ref="f1896d43112b855a2c405b324398c624" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::GetConnectTimeoutUSec           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the timeout value that specifies the maximum number of microseconds a call to CSimpleSocket::Open waits until it completes. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the length of time in microseconds </dd></dl>

</div>
</div><p>
<a class="anchor" name="706d748dcef01b3f68d6927e4fe4eb20"></a><!-- doxytag: member="CActiveSocket::GetData" ref="706d748dcef01b3f68d6927e4fe4eb20" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8* CSimpleSocket::GetData           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a pointer to internal receive buffer. 
<p>
The user MUST not free this pointer when finished. This memory is managed internally by the CSocket class. <dl class="return" compact><dt><b>Returns:</b></dt><dd>pointer to data if valid, else returns NULL. </dd></dl>

</div>
</div><p>
<a class="anchor" name="718b7685ae987a38577e5b4dc297a252"></a><!-- doxytag: member="CActiveSocket::GetMulticast" ref="718b7685ae987a38577e5b4dc297a252" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::GetMulticast           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return true if socket is multicast or false is socket is unicast. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if multicast is enabled </dd></dl>

</div>
</div><p>
<a class="anchor" name="ab0cf7934f60a1ae39af1559b0d3cab7"></a><!-- doxytag: member="CActiveSocket::GetReceiveTimeoutSec" ref="ab0cf7934f60a1ae39af1559b0d3cab7" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::GetReceiveTimeoutSec           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the timeout value that specifies the maximum number of seconds a a call to <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a> waits until it completes. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the length of time in seconds </dd></dl>

</div>
</div><p>
<a class="anchor" name="13d441ea66aaf5e16e22d70a785e4510"></a><!-- doxytag: member="CActiveSocket::GetReceiveTimeoutUSec" ref="13d441ea66aaf5e16e22d70a785e4510" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::GetReceiveTimeoutUSec           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the timeout value that specifies the maximum number of microseconds a call to <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a> waits until it completes. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the length of time in microseconds </dd></dl>

</div>
</div><p>
<a class="anchor" name="0a65ca475c26968d536109cedb95f8a1"></a><!-- doxytag: member="CActiveSocket::GetReceiveWindowSize" ref="0a65ca475c26968d536109cedb95f8a1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16 CSimpleSocket::GetReceiveWindowSize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the TCP receive buffer window size for the current socket object. 
<p>
<br>
<br>
<b>NOTE:</b> Linux will set the receive buffer to twice the value passed. <dl class="return" compact><dt><b>Returns:</b></dt><dd>zero on failure else the number of bytes of the TCP receive buffer window size if successful. </dd></dl>

</div>
</div><p>
<a class="anchor" name="eeffa14508f2eb24e2b7ce006b11c468"></a><!-- doxytag: member="CActiveSocket::GetSendTimeoutSec" ref="eeffa14508f2eb24e2b7ce006b11c468" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::GetSendTimeoutSec           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the timeout value that specifies the maximum number of seconds a a call to <a class="el" href="classCSimpleSocket.html#cfd665d8d563b9d805c97a8ec9b66906" title="Attempts to send a block of data on an established connection.">CSimpleSocket::Send</a> waits until it completes. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the length of time in seconds </dd></dl>

</div>
</div><p>
<a class="anchor" name="06e9a88a898e4acb1e9533a20b14527f"></a><!-- doxytag: member="CActiveSocket::GetSendTimeoutUSec" ref="06e9a88a898e4acb1e9533a20b14527f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::GetSendTimeoutUSec           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the timeout value that specifies the maximum number of microseconds a call to <a class="el" href="classCSimpleSocket.html#cfd665d8d563b9d805c97a8ec9b66906" title="Attempts to send a block of data on an established connection.">CSimpleSocket::Send</a> waits until it completes. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the length of time in microseconds </dd></dl>

</div>
</div><p>
<a class="anchor" name="b5ecb5d4b5af6d9d83f5aeba7b4dc5a1"></a><!-- doxytag: member="CActiveSocket::GetSendWindowSize" ref="b5ecb5d4b5af6d9d83f5aeba7b4dc5a1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16 CSimpleSocket::GetSendWindowSize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the TCP send buffer window size for the current socket object. 
<p>
<br>
<br>
<b>NOTE:</b> Linux will set the send buffer to twice the value passed. <dl class="return" compact><dt><b>Returns:</b></dt><dd>zero on failure else the number of bytes of the TCP receive buffer window size if successful. </dd></dl>

</div>
</div><p>
<a class="anchor" name="523ac14d9c481058084eb25f8a2ee147"></a><!-- doxytag: member="CActiveSocket::GetServerAddr" ref="523ac14d9c481058084eb25f8a2ee147" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8* CSimpleSocket::GetServerAddr           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns server Internet host address as a string in standard numbers-and-dots notation. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>NULL if invalid </dd></dl>

</div>
</div><p>
<a class="anchor" name="bfe30b93b5b70e9c03f89be8e7fcd528"></a><!-- doxytag: member="CActiveSocket::GetServerPort" ref="bfe30b93b5b70e9c03f89be8e7fcd528" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int16 CSimpleSocket::GetServerPort           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the port number on which the server is connected. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>server port number. </dd></dl>

</div>
</div><p>
<a class="anchor" name="21b802b377cea0f8388e154b1f7395c3"></a><!-- doxytag: member="CActiveSocket::GetSocketDescriptor" ref="21b802b377cea0f8388e154b1f7395c3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SOCKET CSimpleSocket::GetSocketDescriptor           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return socket descriptor. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>socket descriptor which is a signed 32 bit integer. </dd></dl>

</div>
</div><p>
<a class="anchor" name="27419d5433086428196f2d1616bc053a"></a><!-- doxytag: member="CActiveSocket::GetSocketDscp" ref="27419d5433086428196f2d1616bc053a" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::GetSocketDscp           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return Differentiated Services Code Point (DSCP) value currently set on the socket object. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>DSCP for current socket object. <br>
<br>
 <b>NOTE:</b> Windows special notes <a href="http://support.microsoft.com/kb/248611.">http://support.microsoft.com/kb/248611.</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="30d668bd610f47790106875aa7ac092b"></a><!-- doxytag: member="CActiveSocket::GetSocketError" ref="30d668bd610f47790106875aa7ac092b" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2">CSocketError</a> CSimpleSocket::GetSocketError           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the last error that occured for the instace of the <a class="el" href="classCSimpleSocket.html" title="Provides a platform independent class to for socket development.">CSimpleSocket</a> instance. 
<p>
This method should be called immediately to retrieve the error code for the failing mehtod call. <dl class="return" compact><dt><b>Returns:</b></dt><dd>last error that occured. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8b071012c1a0a2545bf9f2de6ab33b2f"></a><!-- doxytag: member="CActiveSocket::GetSocketType" ref="8b071012c1a0a2545bf9f2de6ab33b2f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7">CSocketType</a> CSimpleSocket::GetSocketType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return socket descriptor. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>socket descriptor which is a signed 32 bit integer. </dd></dl>

</div>
</div><p>
<a class="anchor" name="08e3fc3ef4b8e083cf9a44bbc4fa85bf"></a><!-- doxytag: member="CActiveSocket::GetTotalTimeMs" ref="08e3fc3ef4b8e083cf9a44bbc4fa85bf" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32 CSimpleSocket::GetTotalTimeMs           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the total time the of the last operation in milliseconds. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>number of milliseconds of last operation. </dd></dl>

</div>
</div><p>
<a class="anchor" name="3be3760f491b311feffae79868840f0e"></a><!-- doxytag: member="CActiveSocket::GetTotalTimeUsec" ref="3be3760f491b311feffae79868840f0e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32 CSimpleSocket::GetTotalTimeUsec           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the total time the of the last operation in microseconds. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>number of microseconds or last operation. </dd></dl>

</div>
</div><p>
<a class="anchor" name="e50622a90672c5c697f2ec7a3a7eec06"></a><!-- doxytag: member="CActiveSocket::Initialize" ref="e50622a90672c5c697f2ec7a3a7eec06" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::Initialize           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initialize instance of CSocket. 
<p>
This method MUST be called before an object can be used. Errors : CSocket::SocketProtocolError, CSocket::SocketInvalidSocket, <dl class="return" compact><dt><b>Returns:</b></dt><dd>true if properly initialized. </dd></dl>

</div>
</div><p>
<a class="anchor" name="b8eeaaf4aa2c27836d9e7e9029b76c17"></a><!-- doxytag: member="CActiveSocket::IsNonblocking" ref="b8eeaaf4aa2c27836d9e7e9029b76c17" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::IsNonblocking           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns blocking/non-blocking state of socket. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if the socket is non-blocking, else return false. </dd></dl>

</div>
</div><p>
<a class="anchor" name="66611a29e3ad37b0f4913cf378ccd14a"></a><!-- doxytag: member="CActiveSocket::IsSocketValid" ref="66611a29e3ad37b0f4913cf378ccd14a" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool CSimpleSocket::IsSocketValid           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Does the current instance of the socket object contain a valid socket descriptor. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if the socket object contains a valid socket descriptor. </dd></dl>

</div>
</div><p>
<a class="anchor" name="5701a40f547abb0f71b7c94e998c0008"></a><!-- doxytag: member="CActiveSocket::Open" ref="5701a40f547abb0f71b7c94e998c0008" args="(const uint8 *pAddr, int16 nPort)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CActiveSocket::Open           </td>
          <td>(</td>
          <td class="paramtype">const uint8 *&nbsp;</td>
          <td class="paramname"> <em>pAddr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int16&nbsp;</td>
          <td class="paramname"> <em>nPort</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Established a connection to the address specified by pAddr. 
<p>
Connection-based protocol sockets (CSocket::SocketTypeTcp) may successfully call <a class="el" href="classCActiveSocket.html#5701a40f547abb0f71b7c94e998c0008" title="Established a connection to the address specified by pAddr.">Open()</a> only once, however; connectionless protocol sockets (CSocket::SocketTypeUdp) may use <a class="el" href="classCActiveSocket.html#5701a40f547abb0f71b7c94e998c0008" title="Established a connection to the address specified by pAddr.">Open()</a> multiple times to change their association. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pAddr</em>&nbsp;</td><td>specifies the destination address to connect. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nPort</em>&nbsp;</td><td>specifies the destination port. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if successful connection made, otherwise false. </dd></dl>

</div>
</div><p>
<a class="anchor" name="973c8856b081fa4d784d5a9751549b76"></a><!-- doxytag: member="CActiveSocket::Receive" ref="973c8856b081fa4d784d5a9751549b76" args="(int32 nMaxBytes=1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::Receive           </td>
          <td>(</td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nMaxBytes</em> = <code>1</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Attempts to receive a block of data on an established connection. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>nMaxBytes</em>&nbsp;</td><td>maximum number of bytes to receive. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>number of bytes actually received. <p>
of zero means the connection has been shutdown on the other side. <p>
of -1 means that an error has occurred. </dd></dl>

</div>
</div><p>
<a class="anchor" name="1ffd254061206680384dc9cda52306fd"></a><!-- doxytag: member="CActiveSocket::Select" ref="1ffd254061206680384dc9cda52306fd" args="(int32 nTimeoutSec, int32 nTimeoutUSec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::Select           </td>
          <td>(</td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nTimeoutSec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nTimeoutUSec</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Examine the socket descriptor sets currently owned by the instance of the socket class (the readfds, writefds, and errorfds parameters) to see whether some of their descriptors are ready for reading, are ready for writing, or have an exceptional condition pending, respectively. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>nTimeoutSec</em>&nbsp;</td><td>timeout in seconds for select. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nTimeoutUSec</em>&nbsp;</td><td>timeout in micro seconds for select. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if socket has data ready, or false if not ready or timed out. </dd></dl>

</div>
</div><p>
<a class="anchor" name="089767d4181d190f3a040860c9788bb2"></a><!-- doxytag: member="CActiveSocket::Select" ref="089767d4181d190f3a040860c9788bb2" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool CSimpleSocket::Select           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Examine the socket descriptor sets currently owned by the instance of the socket class (the readfds, writefds, and errorfds parameters) to see whether some of their descriptors are ready for reading, are ready for writing, or have an exceptional condition pending, respectively. 
<p>
Block until an event happens on the specified file descriptors. <dl class="return" compact><dt><b>Returns:</b></dt><dd>true if socket has data ready, or false if not ready or timed out. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8f2bbf005680a3f8ac6611107112db8f"></a><!-- doxytag: member="CActiveSocket::Send" ref="8f2bbf005680a3f8ac6611107112db8f" args="(const struct iovec *sendVector, int32 nNumItems)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::Send           </td>
          <td>(</td>
          <td class="paramtype">const struct iovec *&nbsp;</td>
          <td class="paramname"> <em>sendVector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nNumItems</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Attempts to send at most nNumItem blocks described by sendVector to the socket descriptor associated with the socket object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sendVector</em>&nbsp;</td><td>pointer to an array of iovec structures </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nNumItems</em>&nbsp;</td><td>number of items in the vector to process <br>
<b>NOTE:</b> Buffers are processed in the order specified. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>number of bytes actually sent, return of zero means the connection has been shutdown on the other side, and a return of -1 means that an error has occurred. </dd></dl>

</div>
</div><p>
<a class="anchor" name="cfd665d8d563b9d805c97a8ec9b66906"></a><!-- doxytag: member="CActiveSocket::Send" ref="cfd665d8d563b9d805c97a8ec9b66906" args="(const uint8 *pBuf, size_t bytesToSend)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::Send           </td>
          <td>(</td>
          <td class="paramtype">const uint8 *&nbsp;</td>
          <td class="paramname"> <em>pBuf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>bytesToSend</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Attempts to send a block of data on an established connection. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pBuf</em>&nbsp;</td><td>block of data to be sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bytesToSend</em>&nbsp;</td><td>size of data block to be sent. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>number of bytes actually sent. <p>
of zero means the connection has been shutdown on the other side. <p>
of -1 means that an error has occurred. </dd></dl>

<p>Reimplemented in <a class="el" href="classCPassiveSocket.html#cd8c5d043b7220ee3ca2c6d15c5dfe88">CPassiveSocket</a>.</p>

</div>
</div><p>
<a class="anchor" name="169550aeedaea4a764a16ac46d3c5186"></a><!-- doxytag: member="CActiveSocket::SendFile" ref="169550aeedaea4a764a16ac46d3c5186" args="(int32 nOutFd, int32 nInFd, off_t *pOffset, int32 nCount)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 CSimpleSocket::SendFile           </td>
          <td>(</td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nOutFd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nInFd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">off_t *&nbsp;</td>
          <td class="paramname"> <em>pOffset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nCount</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copies data between one file descriptor and another. 
<p>
On some systems this copying is done within the kernel, and thus is more efficient than the combination of <a class="el" href="classCSimpleSocket.html#cfd665d8d563b9d805c97a8ec9b66906" title="Attempts to send a block of data on an established connection.">CSimpleSocket::Send</a> and <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a>, which would require transferring data to and from user space. <br>
<b>Note:</b> This is available on all implementations, but the kernel implementation is only available on Unix type systems. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>nOutFd</em>&nbsp;</td><td>descriptor opened for writing. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nInFd</em>&nbsp;</td><td>descriptor opened for reading. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pOffset</em>&nbsp;</td><td>from which to start reading data from input file. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nCount</em>&nbsp;</td><td>number of bytes to copy between file descriptors. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>number of bytes written to the out socket descriptor. </dd></dl>

</div>
</div><p>
<a class="anchor" name="51c89ece94e5c0cd58f246307de8a440"></a><!-- doxytag: member="CActiveSocket::SetBlocking" ref="51c89ece94e5c0cd58f246307de8a440" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::SetBlocking           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the socket to blocking. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if successful set to blocking, else return false; </dd></dl>

</div>
</div><p>
<a class="anchor" name="fc1e28155821d07eb06a07e9ec9af1c4"></a><!-- doxytag: member="CActiveSocket::SetConnectTimeout" ref="fc1e28155821d07eb06a07e9ec9af1c4" args="(int32 nConnectTimeoutSec, int32 nConnectTimeoutUsec=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CSimpleSocket::SetConnectTimeout           </td>
          <td>(</td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nConnectTimeoutSec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nConnectTimeoutUsec</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the timeout value that specifies the maximum amount of time a call to <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a> waits until it completes. 
<p>
Use the method <a class="el" href="classCSimpleSocket.html#9809dfe236d876c9caa22e955721d863" title="Sets the timeout value that specifies the maximum amount of time a call to CSimpleSocket::Receive...">CSimpleSocket::SetReceiveTimeout</a> to specify the number of seconds to wait. If a call to <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a> has blocked for the specified length of time without receiving additional data, it returns with a partial count or <a class="el" href="classCSimpleSocket.html#30d668bd610f47790106875aa7ac092b" title="Returns the last error that occured for the instace of the CSimpleSocket instance...">CSimpleSocket::GetSocketError</a> set to <a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2c25321894edd9598a3d0da957735034e" title="Operation would block if socket were blocking.">CSimpleSocket::SocketEwouldblock</a> if no data were received. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>nConnectTimeoutSec</em>&nbsp;</td><td>of timeout in seconds. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nConnectTimeoutUsec</em>&nbsp;</td><td>of timeout in microseconds. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if socket connection timeout was successfully set. </dd></dl>

</div>
</div><p>
<a class="anchor" name="282cf019219627c87dfcf65c5ff52266"></a><!-- doxytag: member="CActiveSocket::SetMulticast" ref="282cf019219627c87dfcf65c5ff52266" args="(bool bEnable, uint8 multicastTTL=1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::SetMulticast           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>bEnable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8&nbsp;</td>
          <td class="paramname"> <em>multicastTTL</em> = <code>1</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Enable/disable multicast for a socket. 
<p>
This options is only valid for socket descriptors of type <a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c741e2e238da60bd587514f61a0e206833" title="Defines socket as UDP socket.">CSimpleSocket::SocketTypeUdp</a>. <dl class="return" compact><dt><b>Returns:</b></dt><dd>true if multicast was enabled or false if socket type is not <a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c741e2e238da60bd587514f61a0e206833" title="Defines socket as UDP socket.">CSimpleSocket::SocketTypeUdp</a> and the error will be set to <a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c271b3f4c36e859028efdb9dd2c499e888" title="Invalid protocol for operation.">CSimpleSocket::SocketProtocolError</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="17b8048b915d6429415d2014f7b3329d"></a><!-- doxytag: member="CActiveSocket::SetNonblocking" ref="17b8048b915d6429415d2014f7b3329d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::SetNonblocking           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the socket as non-blocking. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if successful set to non-blocking, else return false; </dd></dl>

</div>
</div><p>
<a class="anchor" name="e502d30b8df84caf6e260b82a686d10a"></a><!-- doxytag: member="CActiveSocket::SetOptionLinger" ref="e502d30b8df84caf6e260b82a686d10a" args="(bool bEnable, uint16 nTime)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::SetOptionLinger           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>bEnable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16&nbsp;</td>
          <td class="paramname"> <em>nTime</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Controls the actions taken when <a class="el" href="classCSimpleSocket.html#fbb30cef80ae0faec59403184cab3bb1" title="Close socket.">CSimpleSocket::Close</a> is executed on a socket object that has unsent data. 
<p>
The default value for this option is <b>off</b>.<ul>
<li>Following are the three possible scenarios.<ol type=a>
<li><b>bEnable</b> is false, <a class="el" href="classCSimpleSocket.html#fbb30cef80ae0faec59403184cab3bb1" title="Close socket.">CSimpleSocket::Close</a> returns immediately, but any unset data is transmitted (after <a class="el" href="classCSimpleSocket.html#fbb30cef80ae0faec59403184cab3bb1" title="Close socket.">CSimpleSocket::Close</a> returns)</li><li><b>bEnable</b> is true and <b>nTime</b> is zero, <a class="el" href="classCSimpleSocket.html#fbb30cef80ae0faec59403184cab3bb1" title="Close socket.">CSimpleSocket::Close</a> return immediately and any unsent data is discarded.</li><li><b>bEnable</b> is true and <b>nTime</b> is nonzero, <a class="el" href="classCSimpleSocket.html#fbb30cef80ae0faec59403184cab3bb1" title="Close socket.">CSimpleSocket::Close</a> does not return until all unsent data is transmitted (or the connection is Closed by the remote system). <br>
</li></ol>
</li></ul>
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>bEnable</em>&nbsp;</td><td>true to enable option false to disable option. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nTime</em>&nbsp;</td><td>time in seconds to linger. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if option successfully set </dd></dl>

</div>
</div><p>
<a class="anchor" name="70dc7bedc18197071bf6e1f5f38f606b"></a><!-- doxytag: member="CActiveSocket::SetOptionReuseAddr" ref="70dc7bedc18197071bf6e1f5f38f606b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::SetOptionReuseAddr           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Tells the kernel that even if this port is busy (in the TIME_WAIT state), go ahead and reuse it anyway. 
<p>
If it is busy, but with another state, you will still get an address already in use error. <dl class="return" compact><dt><b>Returns:</b></dt><dd>true if option successfully set </dd></dl>

</div>
</div><p>
<a class="anchor" name="9809dfe236d876c9caa22e955721d863"></a><!-- doxytag: member="CActiveSocket::SetReceiveTimeout" ref="9809dfe236d876c9caa22e955721d863" args="(int32 nRecvTimeoutSec, int32 nRecvTimeoutUsec=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::SetReceiveTimeout           </td>
          <td>(</td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nRecvTimeoutSec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nRecvTimeoutUsec</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the timeout value that specifies the maximum amount of time a call to <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a> waits until it completes. 
<p>
Use the method <a class="el" href="classCSimpleSocket.html#9809dfe236d876c9caa22e955721d863" title="Sets the timeout value that specifies the maximum amount of time a call to CSimpleSocket::Receive...">CSimpleSocket::SetReceiveTimeout</a> to specify the number of seconds to wait. If a call to <a class="el" href="classCSimpleSocket.html#973c8856b081fa4d784d5a9751549b76" title="Attempts to receive a block of data on an established connection.">CSimpleSocket::Receive</a> has blocked for the specified length of time without receiving additional data, it returns with a partial count or <a class="el" href="classCSimpleSocket.html#30d668bd610f47790106875aa7ac092b" title="Returns the last error that occured for the instace of the CSimpleSocket instance...">CSimpleSocket::GetSocketError</a> set to <a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2c25321894edd9598a3d0da957735034e" title="Operation would block if socket were blocking.">CSimpleSocket::SocketEwouldblock</a> if no data were received. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>nRecvTimeoutSec</em>&nbsp;</td><td>of timeout in seconds. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nRecvTimeoutUsec</em>&nbsp;</td><td>of timeout in microseconds. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if socket timeout was successfully set. </dd></dl>

</div>
</div><p>
<a class="anchor" name="047528b17ae445ae84d8288a316a16a9"></a><!-- doxytag: member="CActiveSocket::SetReceiveWindowSize" ref="047528b17ae445ae84d8288a316a16a9" args="(uint16 nWindowSize)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16 CSimpleSocket::SetReceiveWindowSize           </td>
          <td>(</td>
          <td class="paramtype">uint16&nbsp;</td>
          <td class="paramname"> <em>nWindowSize</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the TCP receive buffer window size for the current socket object. 
<p>
<br>
<br>
<b>NOTE:</b> Linux will set the receive buffer to twice the value passed. <dl class="return" compact><dt><b>Returns:</b></dt><dd>zero on failure else the number of bytes of the TCP send buffer window size if successful. </dd></dl>

</div>
</div><p>
<a class="anchor" name="258e807fea2f9f25aff4b636cf8f8387"></a><!-- doxytag: member="CActiveSocket::SetSendTimeout" ref="258e807fea2f9f25aff4b636cf8f8387" args="(int32 nSendTimeoutSec, int32 nSendTimeoutUsec=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::SetSendTimeout           </td>
          <td>(</td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nSendTimeoutSec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32&nbsp;</td>
          <td class="paramname"> <em>nSendTimeoutUsec</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the timeout value that specifies the maximum amount of time a call to <a class="el" href="classCSimpleSocket.html#cfd665d8d563b9d805c97a8ec9b66906" title="Attempts to send a block of data on an established connection.">CSimpleSocket::Send</a> waits until it completes. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the length of time in seconds </dd></dl>

</div>
</div><p>
<a class="anchor" name="166c7f92820582af3e5071c14da3430a"></a><!-- doxytag: member="CActiveSocket::SetSendWindowSize" ref="166c7f92820582af3e5071c14da3430a" args="(uint16 nWindowSize)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint16 CSimpleSocket::SetSendWindowSize           </td>
          <td>(</td>
          <td class="paramtype">uint16&nbsp;</td>
          <td class="paramname"> <em>nWindowSize</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the TCP send buffer window size for the current socket object. 
<p>
<br>
<br>
<b>NOTE:</b> Linux will set the send buffer to twice the value passed. <dl class="return" compact><dt><b>Returns:</b></dt><dd>zero on failure else the number of bytes of the TCP send buffer window size if successful. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8c373c3f300e588ea048773cb1457447"></a><!-- doxytag: member="CActiveSocket::SetSocketDscp" ref="8c373c3f300e588ea048773cb1457447" args="(int nDscp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::SetSocketDscp           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>nDscp</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set Differentiated Services Code Point (DSCP) for socket object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>nDscp</em>&nbsp;</td><td>value of TOS setting which will be converted to DSCP </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if DSCP value was properly set <br>
<br>
 <b>NOTE:</b> Windows special notes <a href="http://support.microsoft.com/kb/248611.">http://support.microsoft.com/kb/248611.</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="2c53d886b10b5a1ac884c0b12408efdf"></a><!-- doxytag: member="CActiveSocket::SetSocketError" ref="2c53d886b10b5a1ac884c0b12408efdf" args="(CSimpleSocket::CSocketError error)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CSimpleSocket::SetSocketError           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2">CSimpleSocket::CSocketError</a>&nbsp;</td>
          <td class="paramname"> <em>error</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set internal socket error to that specified error. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>error</em>&nbsp;</td><td>type of error </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="c3791a65b2ac38e9147178778f14213d"></a><!-- doxytag: member="CActiveSocket::SetSocketHandle" ref="c3791a65b2ac38e9147178778f14213d" args="(SOCKET socket)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CSimpleSocket::SetSocketHandle           </td>
          <td>(</td>
          <td class="paramtype">SOCKET&nbsp;</td>
          <td class="paramname"> <em>socket</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set object socket handle to that specified as parameter. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>socket</em>&nbsp;</td><td>value of socket descriptor </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="5b7672c71bc8d8431d36974b946103d7"></a><!-- doxytag: member="CActiveSocket::Shutdown" ref="5b7672c71bc8d8431d36974b946103d7" args="(CShutdownMode nShutdown)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CSimpleSocket::Shutdown           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classCSimpleSocket.html#8c3d488772a77dae06eb1f8c205abfe9">CShutdownMode</a>&nbsp;</td>
          <td class="paramname"> <em>nShutdown</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Shutdown shut down socket send and receive operations CShutdownMode::Receives - Disables further receive operations. 
<p>
CShutdownMode::Sends - Disables further send operations. CShutdownBoth:: - Disables further send and receive operations. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>nShutdown</em>&nbsp;</td><td>specifies the type of shutdown. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if successfully shutdown otherwise returns false. </dd></dl>

</div>
</div><p>
<a class="anchor" name="80785e9658ecd6e118e9876bb222b074"></a><!-- doxytag: member="CActiveSocket::TranslateSocketError" ref="80785e9658ecd6e118e9876bb222b074" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CSimpleSocket::TranslateSocketError           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Provides a standard error code for cross platform development by mapping the operating system error to an error defined by the CSocket class. 
<p>

</div>
</div><p>
<hr><h2>Friends And Related Function Documentation</h2>
<a class="anchor" name="6c2e5c8c659b9d474e2e0187c72c7e54"></a><!-- doxytag: member="CActiveSocket::CPassiveSocket" ref="6c2e5c8c659b9d474e2e0187c72c7e54" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classCPassiveSocket.html">CPassiveSocket</a><code> [friend]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Field Documentation</h2>
<a class="anchor" name="0fa46b098f507235ab93300d9cede03b"></a><!-- doxytag: member="CActiveSocket::m_bIsBlocking" ref="0fa46b098f507235ab93300d9cede03b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classCSimpleSocket.html#0fa46b098f507235ab93300d9cede03b">CSimpleSocket::m_bIsBlocking</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
socket flags 
<p>

</div>
</div><p>
<a class="anchor" name="2d8ff68b695387829b943db91114e2ed"></a><!-- doxytag: member="CActiveSocket::m_bIsMulticast" ref="2d8ff68b695387829b943db91114e2ed" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classCSimpleSocket.html#2d8ff68b695387829b943db91114e2ed">CSimpleSocket::m_bIsMulticast</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
is socket blocking 
<p>

</div>
</div><p>
<a class="anchor" name="09720c2fe0c1f845b2b8ada42aa57cca"></a><!-- doxytag: member="CActiveSocket::m_errorFds" ref="09720c2fe0c1f845b2b8ada42aa57cca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">fd_set <a class="el" href="classCSimpleSocket.html#09720c2fe0c1f845b2b8ada42aa57cca">CSimpleSocket::m_errorFds</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
read file descriptor set 
<p>

</div>
</div><p>
<a class="anchor" name="922adeaa565bf48b70c94cd1062cf966"></a><!-- doxytag: member="CActiveSocket::m_nBufferSize" ref="922adeaa565bf48b70c94cd1062cf966" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 <a class="el" href="classCSimpleSocket.html#922adeaa565bf48b70c94cd1062cf966">CSimpleSocket::m_nBufferSize</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
internal send/receive buffer 
<p>

</div>
</div><p>
<a class="anchor" name="5eab8f504965f986debf1fabe16f9c02"></a><!-- doxytag: member="CActiveSocket::m_nBytesReceived" ref="5eab8f504965f986debf1fabe16f9c02" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 <a class="el" href="classCSimpleSocket.html#5eab8f504965f986debf1fabe16f9c02">CSimpleSocket::m_nBytesReceived</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
socket type - UDP, TCP or RAW 
<p>

</div>
</div><p>
<a class="anchor" name="961f1d48a92aca4758ff3d9edabae3be"></a><!-- doxytag: member="CActiveSocket::m_nBytesSent" ref="961f1d48a92aca4758ff3d9edabae3be" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 <a class="el" href="classCSimpleSocket.html#961f1d48a92aca4758ff3d9edabae3be">CSimpleSocket::m_nBytesSent</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
number of bytes received 
<p>

</div>
</div><p>
<a class="anchor" name="bb4748d3b25cf5591a8f0c1108f59c0b"></a><!-- doxytag: member="CActiveSocket::m_nFlags" ref="bb4748d3b25cf5591a8f0c1108f59c0b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32 <a class="el" href="classCSimpleSocket.html#bb4748d3b25cf5591a8f0c1108f59c0b">CSimpleSocket::m_nFlags</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
number of bytes sent 
<p>

</div>
</div><p>
<a class="anchor" name="5ff3c7572a658d0cedc180ccffb74580"></a><!-- doxytag: member="CActiveSocket::m_nSocketDomain" ref="5ff3c7572a658d0cedc180ccffb74580" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32 <a class="el" href="classCSimpleSocket.html#5ff3c7572a658d0cedc180ccffb74580">CSimpleSocket::m_nSocketDomain</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
size of internal send/receive buffer 
<p>

</div>
</div><p>
<a class="anchor" name="aa237251e64e0a5018eb773901fa8000"></a><!-- doxytag: member="CActiveSocket::m_nSocketType" ref="aa237251e64e0a5018eb773901fa8000" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classCSimpleSocket.html#6d077b2f4ec0449bf7a0761635a034c7">CSocketType</a> <a class="el" href="classCSimpleSocket.html#aa237251e64e0a5018eb773901fa8000">CSimpleSocket::m_nSocketType</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
socket type PF_INET, PF_INET6 
<p>

</div>
</div><p>
<a class="anchor" name="4f17317b9f61a1a0d0b849fb5089333b"></a><!-- doxytag: member="CActiveSocket::m_pBuffer" ref="4f17317b9f61a1a0d0b849fb5089333b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8* <a class="el" href="classCSimpleSocket.html#4f17317b9f61a1a0d0b849fb5089333b">CSimpleSocket::m_pBuffer</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
number of last error 
<p>

</div>
</div><p>
<a class="anchor" name="c1a4125a37090b19b1b9604de1cf84a9"></a><!-- doxytag: member="CActiveSocket::m_readFds" ref="c1a4125a37090b19b1b9604de1cf84a9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">fd_set <a class="el" href="classCSimpleSocket.html#c1a4125a37090b19b1b9604de1cf84a9">CSimpleSocket::m_readFds</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
write file descriptor set 
<p>

</div>
</div><p>
<a class="anchor" name="8d17e468e981ec84f6eba64c82e32ec1"></a><!-- doxytag: member="CActiveSocket::m_socket" ref="8d17e468e981ec84f6eba64c82e32ec1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SOCKET <a class="el" href="classCSimpleSocket.html#8d17e468e981ec84f6eba64c82e32ec1">CSimpleSocket::m_socket</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4c6904a3857098c5b1261d2183292951"></a><!-- doxytag: member="CActiveSocket::m_socketErrno" ref="4c6904a3857098c5b1261d2183292951" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classCSimpleSocket.html#a82189211bafab77cbea1d52dd3790c2">CSocketError</a> <a class="el" href="classCSimpleSocket.html#4c6904a3857098c5b1261d2183292951">CSimpleSocket::m_socketErrno</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
socket handle 
<p>

</div>
</div><p>
<a class="anchor" name="90df0422c5ebfa4bc9d1499265b717f6"></a><!-- doxytag: member="CActiveSocket::m_stClientSockaddr" ref="90df0422c5ebfa4bc9d1499265b717f6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct sockaddr_in <a class="el" href="classCSimpleSocket.html#90df0422c5ebfa4bc9d1499265b717f6">CSimpleSocket::m_stClientSockaddr</a><code> [read, protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
server address 
<p>

</div>
</div><p>
<a class="anchor" name="a7c7a1be0b72beac2c9ddac8354d60d3"></a><!-- doxytag: member="CActiveSocket::m_stConnectTimeout" ref="a7c7a1be0b72beac2c9ddac8354d60d3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval <a class="el" href="classCSimpleSocket.html#a7c7a1be0b72beac2c9ddac8354d60d3">CSimpleSocket::m_stConnectTimeout</a><code> [read, protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
is the UDP socket multicast; 
<p>

</div>
</div><p>
<a class="anchor" name="2f47c6ad98e583fa74fab014bfc9a6ac"></a><!-- doxytag: member="CActiveSocket::m_stLinger" ref="2f47c6ad98e583fa74fab014bfc9a6ac" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct linger <a class="el" href="classCSimpleSocket.html#2f47c6ad98e583fa74fab014bfc9a6ac">CSimpleSocket::m_stLinger</a><code> [read, protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
multicast group to bind to 
<p>

</div>
</div><p>
<a class="anchor" name="00d93aa0620e16737f9b7889c910d0df"></a><!-- doxytag: member="CActiveSocket::m_stMulticastGroup" ref="00d93aa0620e16737f9b7889c910d0df" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct sockaddr_in <a class="el" href="classCSimpleSocket.html#00d93aa0620e16737f9b7889c910d0df">CSimpleSocket::m_stMulticastGroup</a><code> [read, protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
client address 
<p>

</div>
</div><p>
<a class="anchor" name="f36c0eb9621fdf0587c5702c0f06b814"></a><!-- doxytag: member="CActiveSocket::m_stRecvTimeout" ref="f36c0eb9621fdf0587c5702c0f06b814" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval <a class="el" href="classCSimpleSocket.html#f36c0eb9621fdf0587c5702c0f06b814">CSimpleSocket::m_stRecvTimeout</a><code> [read, protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
connection timeout 
<p>

</div>
</div><p>
<a class="anchor" name="1074180f257ee695aeaeeb16127efde2"></a><!-- doxytag: member="CActiveSocket::m_stSendTimeout" ref="1074180f257ee695aeaeeb16127efde2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct timeval <a class="el" href="classCSimpleSocket.html#1074180f257ee695aeaeeb16127efde2">CSimpleSocket::m_stSendTimeout</a><code> [read, protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
receive timeout 
<p>

</div>
</div><p>
<a class="anchor" name="4c8501230c0005df31597b50abd330cf"></a><!-- doxytag: member="CActiveSocket::m_stServerSockaddr" ref="4c8501230c0005df31597b50abd330cf" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct sockaddr_in <a class="el" href="classCSimpleSocket.html#4c8501230c0005df31597b50abd330cf">CSimpleSocket::m_stServerSockaddr</a><code> [read, protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
send timeout 
<p>

</div>
</div><p>
<a class="anchor" name="79d0091533c01bd883f89d976cf851e6"></a><!-- doxytag: member="CActiveSocket::m_timer" ref="79d0091533c01bd883f89d976cf851e6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classCStatTimer.html">CStatTimer</a> <a class="el" href="classCSimpleSocket.html#79d0091533c01bd883f89d976cf851e6">CSimpleSocket::m_timer</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
linger flag 
<p>

</div>
</div><p>
<a class="anchor" name="802754bb89c6a6e3ef2d11e5146b8de9"></a><!-- doxytag: member="CActiveSocket::m_writeFds" ref="802754bb89c6a6e3ef2d11e5146b8de9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">fd_set <a class="el" href="classCSimpleSocket.html#802754bb89c6a6e3ef2d11e5146b8de9">CSimpleSocket::m_writeFds</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
internal statistics. 
<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="ActiveSocket_8h-source.html">ActiveSocket.h</a><li><a class="el" href="ActiveSocket_8cpp.html">ActiveSocket.cpp</a></ul>
</div>
<hr>
<table width="100%">
  <tr>
    <td width="10%" align="left" valign="center">
      <a href="http://www.carrierlabs.com"> 
      <img src="carrierlabs.jpg" width="120" height="62" border="0" alt="CarrierLabs Logo"/></a>
    </td>

    <td width="35%" align="left" valign="center">
      hosts this site.
    </td>

    <td>
<!-- Counter Code START -->
<table id="counter" onmouseover="fun();" onmouseout="nd();" cellspacing="0" cellpadding="0"><tr><td>
<center><table cellspacing="0" cellpadding="0"><tr><td><a href="http://www.visitorcounters.org/"><img style="border: 0;" src="http://www.visitorcounters.org/counter.php?type=1&id=MTUwNzI=" alt="free hit counter" title="free hit counter"/></a></td><td><a href="http://www.salvagedata.co.uk"><img style="border: 0;" src="http://www.visitorcounters.org/counter.php?type=2&id=MTUwNzI=" alt="data recovery" title="data recovery"/></a></td></tr></table></center></td></tr>
<tr><td>
<center><a href="http://www.salvagedata.com" target="_blank"><span style="font-size:11px;">data recovery services</span></a></center></td></tr>
</table>
<script type="text/javascript" src="http://www.visitorcounters.org/getCode.php?id=MTUwNzI="></script>
<!-- Counter Code END -->
    </td>
<td>
<form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="1136058">
<input type="image" src="https://www.paypal.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="">
<img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1">
</form>

</td>
    <td align="right" valign="center">
      Send comments to:<br>
      <a href="mailto:mark@carrierlabs.com">CarrierLabs Developers</a>
    </td>
  </tr>
</table>

</body> 
</html>
